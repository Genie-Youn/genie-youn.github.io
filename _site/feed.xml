<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-03T20:50:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">오르막길</title><subtitle>잊기전에 기록하기</subtitle><author><name>genie-youn</name></author><entry><title type="html">크롬 개발자도구에서 Remote Device를 못 찾을 때</title><link href="http://localhost:4000/journal/%ED%81%AC%EB%A1%AC%EC%97%90%EC%84%9C-Remote-Device%EB%A5%BC-%EB%AA%BB%EC%B0%BE%EC%9D%84%EB%95%8C.html" rel="alternate" type="text/html" title="크롬 개발자도구에서 Remote Device를 못 찾을 때" /><published>2019-10-03T00:00:00+09:00</published><updated>2019-10-03T00:00:00+09:00</updated><id>http://localhost:4000/journal/%ED%81%AC%EB%A1%AC%EC%97%90%EC%84%9C-Remote-Device%EB%A5%BC-%EB%AA%BB%EC%B0%BE%EC%9D%84%EB%95%8C</id><content type="html" xml:base="http://localhost:4000/journal/%ED%81%AC%EB%A1%AC%EC%97%90%EC%84%9C-Remote-Device%EB%A5%BC-%EB%AA%BB%EC%B0%BE%EC%9D%84%EB%95%8C.html">&lt;center&gt;&lt;small&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&quot; href=&quot;https://unsplash.com/@ianrobinson?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Download free do whatever you want high-resolution photos from Ian Robinson&quot;&gt;&lt;span style=&quot;display:inline-block;padding:2px 3px&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&quot; viewBox=&quot;0 0 32 32&quot;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&quot;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&quot;display:inline-block;padding:2px 3px&quot;&gt;Ian Robinson&lt;/span&gt;&lt;/a&gt;&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;인앱 브라우저에서 동작하는 스크립트를 디버깅하기 위해 늘 하던대로 개발자도구를 켜고, USB 디버깅을 켠다음, USB를 연결해서 크롬의 Remote Device 탭을 열었는데 왠걸 디바이스를 찾을 수 없는 일이 발생했다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;자세한 방법은 &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/remote-debugging?utm_campaign=2016q3&amp;amp;utm_medium=redirect&amp;amp;utm_source=dcc&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;삽질&quot;&gt;삽질&lt;/h3&gt;
&lt;p&gt;승인된 기기를 전부 지워보기도 하고, 옆자리 동료 맥에도 꽂아보고 케이블도 바꿔봤지만 읽힐 생각은 전혀 없던 찰나 스택오버플로우에서 Android 디버그 브리지(adb)를 받아서 돌려보라는 글을 하나 보았다.&lt;/p&gt;

&lt;p&gt;이 &lt;a href=&quot;https://developer.android.com/studio/releases/platform-tools&quot;&gt;링크&lt;/a&gt; 에 들어가서 &lt;code class=&quot;highlighter-rouge&quot;&gt;./adb devices&lt;/code&gt; 를 돌려보면 콘솔에 연결되있던 디바이스를 찾을 수 있는것을 확인할 수 있다. 그러면 크롬에도 연결된 디바이스가 떠 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;adb에 대한 자세한 설명은 &lt;a href=&quot;https://developer.android.com/studio/command-line/adb?gclid=Cj0KCQjwuNbsBRC-ARIsAAzITuedSIz0vnnWTeIax-fiI4dQw6x0HU7ZgZeBB-Po51oSD-LUNVCk7a8aAvV4EALw_wcB&quot;&gt;여기&lt;/a&gt; 를 참고한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;
&lt;p&gt;원인은 모르겠지만.. 늘 하던게 안되서 두시간은 해맸던 것 같다. ㅠ.ㅠ&lt;/p&gt;</content><author><name>genie-youn</name></author><category term="chrome" /><category term="debugging" /><summary type="html">unsplash-logoIan Robinson</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/ian-robinson-EzGRCDqLPaY-unsplash.jpg" /></entry><entry><title type="html">[번역]Vue.js 3: Future-Oriented Programming</title><link href="http://localhost:4000/journal/%EB%B2%88%EC%97%AD-Vue.js-3-Future-Oriented-Programming.html" rel="alternate" type="text/html" title="[번역]Vue.js 3: Future-Oriented Programming" /><published>2019-08-23T00:00:00+09:00</published><updated>2019-08-23T00:00:00+09:00</updated><id>http://localhost:4000/journal/%5B%EB%B2%88%EC%97%AD%5DVue.js-3:-Future-Oriented-Programming</id><content type="html" xml:base="http://localhost:4000/journal/%EB%B2%88%EC%97%AD-Vue.js-3-Future-Oriented-Programming.html">&lt;center&gt;&lt;small&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&quot; href=&quot;https://unsplash.com/@kyawthutun?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Download free do whatever you want high-resolution photos from Kyaw Tun&quot;&gt;&lt;span style=&quot;display:inline-block;padding:2px 3px&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white&quot; viewBox=&quot;0 0 32 32&quot;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&quot;M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&quot;display:inline-block;padding:2px 3px&quot;&gt;Kyaw Tun&lt;/span&gt;&lt;/a&gt;&lt;/small&gt;&lt;/center&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;실무에 Vue를 사용하면서 재사용 할 수 있는 로직들은 주로 믹스인으로 분리하여 사용하고 있었다.&lt;/p&gt;

&lt;p&gt;믹스인은 많은 편리함을 가져다 주었지만 늘 몇가지 마음을 무겁게 하는 부분이 있었는데, 특히 컴포넌트가 복잡해지고 이로 인해 믹스인이 중첩될 때 이 속성이 혹은 이 메소드가 대체 어디서 왔는지 코드를 읽기가 쉽지 않다는 부분이었다.&lt;/p&gt;

&lt;p&gt;아마 로직을 어떻게 깔끔하게 재사용할지에 대한 고민은 Vue를 꽤나 크고 복잡한 프로젝트에서 사용중이라면 아마 많은 사람들이 겪었을 고민이고 Vue는 이에 대한 해결책으로 Composition API를 제시했다.&lt;/p&gt;

&lt;p&gt;이와 관련하여 쉽게 설명한 포스트가 있어 번역하여 공유한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 글은 &lt;a href=&quot;https://blog.bitsrc.io/vue-js-3-future-oriented-programming-54dee797988b&quot;&gt;Vue.js 3: Future-Oriented Programming&lt;/a&gt;를 원저자의 허락을 받아 번역하였다.&lt;/p&gt;

&lt;p&gt;Vue.js에 관심을 가지고 있다면 아마 곧 3번째 버전이 출시된다는 것을 알고 있을것이다. (미래에 이 글을 읽고 있다면, 이 글이 아직, 여전히 유효하기를 바란다. 😉)&lt;/p&gt;

&lt;p&gt;활발하게 개발되고 있는 새로운 버전의 기능들은 다음 &lt;a href=&quot;https://github.com/vuejs/rfcs&quot;&gt;레파지토리&lt;/a&gt;의 RFC(request for comments)를 통해 확인할 수 있다. 그 중 하나인 functional-api는 Vue 어플리케이션을 개발하는 방식에 드라마틱한 변화를 가져올것 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글은 JavaScript와 Vue에 관하여 어느정도 사전지식을 가지고 있다고 가정하고 쓰여졌다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;(역주) 현재는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Function-based Component API&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Composition API&lt;/code&gt;로 이름이 변경되고 약간의 변화가 생겼다. RFC는 &lt;a href=&quot;https://github.com/vuejs/rfcs/pull/78&quot;&gt;여기&lt;/a&gt; 현재 버전의 도큐먼트는 &lt;a href=&quot;https://vue-composition-api-rfc.netlify.com/#summary&quot;&gt;여기&lt;/a&gt;를 참고하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(광고) 시작하기 전에, &lt;a href=&quot;https://bit.dev&quot;&gt;Bit&lt;/a&gt;을 사용하면 Vue 컴포넌트를 의존하고 있는 모듈들과 함께 캡슐화 할 수 있습니다. 이는 더 쉽게 코드를 재사용하고 유지보수하며 더 적은 오버헤드를 갖도록 잘 모듈화 된 애플리케이션을 설계하는걸 돕습니다. &lt;strong&gt;Bit을 이용하여 독립작인 Vue 컴포넌트를 공유하여 협업하세요.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;현재-api들의-문제&quot;&gt;현재 API들의 문제&lt;/h2&gt;
&lt;p&gt;이해를 돕는 가장 좋은 방법은 예제를 보는것이니, 예제를 살펴보도록 하자. 유저의 데이터를 API로 부터 받아오고, 그 동안 로딩중이라는 상태를 표시하고 스크롤의 높이에 따라 변하는 헤더를 가진 컴포넌트를 구현해야 한다고 생각해보자. 아마 이렇게 생긴?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16642635/64574170-5aee2100-d3a9-11e9-9ee4-8966dc7f05c4.gif&quot; alt=&quot;1_QQigXylzQ95jxCb_FI_dCQ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제로 동작하는 예제는 &lt;a href=&quot;https://enkot.github.io/vue-function-api-test/&quot;&gt;이 곳&lt;/a&gt;에서 볼 수 있다.&lt;/p&gt;

&lt;p&gt;여러 컴포넌트에서 재사용될 수 있는 로직은 추출하는것이 좋다. 현재 Vue 2.x의 API에서는 잘 알려진 몇가지 패턴이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;믹스인 (&lt;code class=&quot;highlighter-rouge&quot;&gt;mixins&lt;/code&gt; 옵션)&lt;/li&gt;
  &lt;li&gt;고차 &lt;sup&gt;Higer-order&lt;/sup&gt; 컴포넌트 (HOCs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스크롤의 위치를 쫓는 로직은 믹스인으로, 데이터를 가져오는 로직은 고차 컴포넌트로 옮겨보자. 일반적인 구현은 다음과 같을것이다.&lt;/p&gt;

&lt;p&gt;Scroll Mixin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;const scrollMixin = {
    data() {
        return {
            pageOffset: 0
        }
    },
    mounted() {
        window.addEventListener('scroll', this.update)
    },
    destroyed() {
        window.removeEventListener('scroll', this.update)
    },
    methods: {
        update() {
            this.pageOffset = window.pageYOffset
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;여기서 스크롤 이벤트에 리스너를 추가하고, 페이지의 offset을 따라 &lt;code class=&quot;highlighter-rouge&quot;&gt;pageOffset&lt;/code&gt;이라는 프로퍼티에 이 값을 저장한다.&lt;/p&gt;

&lt;p&gt;유저 정보를 가져오는 고차 컴포넌트는 다음과 같이 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchUserPosts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/api&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withPostsHOC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WrappedComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;postsIsLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;fetchedPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fetchPosts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;immediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postsIsLoading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchedPosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchUserPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postsIsLoading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;postsCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchedPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WrappedComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postsIsLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchedPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postsCount&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt; 프로퍼티는 각각 로딩 상태와 유저의 포스트에 관한 데이터로 초기화된다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;fetchPosts&lt;/code&gt; 메소드는 인스턴스가 생성된 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;props.id&lt;/code&gt;의 값이 변경될 때 마다 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;를 가진 유저의 포스트를 가져오기 위해 호출된다.&lt;/p&gt;

&lt;p&gt;위 코드는 HOC의 완전한 구현은 아니지만, 이 예제에는 충분할 것이다.
여기서 우리는 특정 컴포넌트를 감싸서 컴포넌트의 프로퍼티와 데이터를 가져오는것과 관련된 프로퍼티를 함께 전달한다.&lt;/p&gt;

&lt;p&gt;감싸지는 컴포넌트는 다음과 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;export default {
    name: 'PostsPage',
    mixins: [scrollMixin],
    props: {
        id: Number,
        isLoading: Boolean,
        posts: Array,
        count: Number
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;해당 프로퍼티에 접근하려면 HOC로 감싸야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const PostsPage = withPostsHOC(PostsPage)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(역주) 해당 컴포넌트의 전체 코드는 &lt;a href=&quot;https://github.com/enkot/vue-function-api-test/blob/master/src/components/PostsPageOptions.vue&quot;&gt;여기&lt;/a&gt;서 확인하시면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특정 로직을 믹스인과 고차 컴포넌트를 통해 분리해 냈으므로, 이제 이 로직들은 다른 그 어떤 컴포넌트에서도 재사용 가능하다. 모든게 아름답게 끝나면 참 좋겠다만, 이 접근법들에는 몇가지 문제가 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;1-네임스페이스의-충돌-️&quot;&gt;1. 네임스페이스의 충돌 ⚔️&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PostPage&lt;/code&gt; 컴포넌트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; 라는 메소드를 추가해야한다고 생각해보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;export default {
    name: 'PostsPage',
    mixins: [scrollMixin],
    props: {
        id: Number,
        isLoading: Boolean,
        posts: Array,
        count: Number
    },
    methods: {
        update() {
            console.log('some update logic here')
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;페이지를 다시 열고 스크롤을 하게 되면, 상단 영역은 더 이상 보여지지 않는다. 우리가 추가한 메소드가 믹스인의 &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; 메소드를 덮어쓰기 때문이다.&lt;/p&gt;

&lt;p&gt;고차 컴포넌트에서도 마찬가지이다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchedPosts&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;로 변경하게 되면 문제가 발생하게 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;const withPostsHOC = WrappedComponent =&amp;gt; ({
    props: WrappedComponent.props, // ['posts', ...]
    data() {
        return {
            postsIsLoading: false,
            posts: [] // fetchedPosts -&amp;gt; posts
        }
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아마 이런 에러를 보게 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;677&quot; alt=&quot;스크린샷 2019-09-25 오전 9 15 46&quot; src=&quot;https://user-images.githubusercontent.com/16642635/65559290-1354c100-df75-11e9-9059-3f671915dd3b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 이유는 감싸려고 했던 컴포넌트가 이미 &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt; 라는 이름의 프로퍼티를 사용하고 있기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;2-명확하지-않은-출처-&quot;&gt;2. 명확하지 않은 출처 📦&lt;/h3&gt;
&lt;p&gt;얼마 후에 이 컴포넌트에 다른 믹스인을 사용해야겠다고 결심한다면 어떻게 될까?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;export default {
    name: 'PostsPage',
    mixins: [scrollMixin, mouseMixin],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이 코드를 보고 &lt;code class=&quot;highlighter-rouge&quot;&gt;pageOffset&lt;/code&gt; 프로퍼티가 어느 믹스인으로부터 주입되었는지 정확히 설명할수 있는가? 또는 두 믹스인 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;yOffset&lt;/code&gt; 프로퍼티를 가질수도 있다. 이럴 경우 마지막 믹스인이 이전 믹스인에 정의되어 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;yOffset&lt;/code&gt; 프로퍼티를 오버라이드 하게된다. 이는 좋은 코드가 아니며 때로는 예상치 못한 많은 버그를 만들어 낼지도 모른다. 😕&lt;/p&gt;

&lt;h3 id=&quot;3-성능-&quot;&gt;3. 성능 ⏱&lt;/h3&gt;

&lt;p&gt;고차 컴포넌트의 또다른 문제는 단지 비즈니스 로직을 재사용하기 위한 목적의 별개의 컴포넌트 인스턴스를 생성해야한다는 것이고, 이 또한 비용임을 명심해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;준비-&quot;&gt;준비 🏗&lt;/h2&gt;

&lt;p&gt;똑같은 문제를 다음 버전에서 제공될 &lt;code class=&quot;highlighter-rouge&quot;&gt;function-based API&lt;/code&gt; 를 통해 해결해 보자.&lt;/p&gt;

&lt;p&gt;Vue3는 아직 릴리즈되지 않았지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-function-api&lt;/code&gt; 라는 플러그인을 통해 2.x에서도 3.x의 함수형 API를 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(역주) rfc의 변화에 맞춰 플러그인 이름도 &lt;code class=&quot;highlighter-rouge&quot;&gt;composition-api&lt;/code&gt; 로 변경되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선 이 플러그인을 설치해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install vue-function-api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;그런다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.use()&lt;/code&gt;를 통해 이 플러그인을 설치할것을 명시한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import Vue from 'vue'
import { plugin } from 'vue-function-api'

Vue.use(plugin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;함수 기반의 API가 제공하는 주요한 기능은 &lt;code class=&quot;highlighter-rouge&quot;&gt;setup()&lt;/code&gt; 이라는 새로운 컴포넌트 옵션이다. 이름에서 알 수 있듯 새로운 API의 함수를 사용하여 컴포넌트의 로직을 설정한다. 이를 통해 스크롤 위치에 따른 상단 영역을 구현해 보자. 기본적인 컴포넌트는 다음과 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class=&quot;container&quot;&amp;gt;
        &amp;lt;p
            v-if=&quot;isLoading&quot;
            class=&quot;loading&quot;
        &amp;gt;Posts loading...&amp;lt;/p&amp;gt;
        &amp;lt;template v-else&amp;gt;
            &amp;lt;div
                class=&quot;topbar&quot;
                :class=&quot;{ open: pageOffset &amp;gt; 120 }&quot;
            &amp;gt;
                &amp;lt;div class=&quot;container content&quot;&amp;gt;
                    &amp;lt;h3&amp;gt;User # posts&amp;lt;/h3&amp;gt;
                    &amp;lt;span class=&quot;count&quot;&amp;gt;8 items&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;h1&amp;gt;User # posts&amp;lt;/h1&amp;gt;
            &amp;lt;span class=&quot;count&quot;&amp;gt;8 items&amp;lt;/span&amp;gt;
            &amp;lt;div
                v-for=&quot;post in posts&quot;
                :key=&quot;post.id&quot;
                class=&quot;box&quot;
            &amp;gt;
                &amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
  setup(props) {
    const pageOffset = 0
    return {
      pageOffset
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt; 함수는 첫번째 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; 객체를 받고, 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; 객체는 반응적이다. 또한 템플릿의 렌더 컨텍스트에 노출될 &lt;code class=&quot;highlighter-rouge&quot;&gt;pageOffset&lt;/code&gt; 프로퍼티를 포함하는 객체를 반환한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;pageOffset&lt;/code&gt; 도 반응형으로 동작하지만, 그 범위는 오로지 렌더 컨텍스트로 제한된다. 템플릿 내에서 다른 프로퍼티를 사용하듯이 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div class=&quot;topbar&quot; :class=&quot;{ open: pageOffset &amp;gt; 120 }&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;그러나 이 프로퍼티는 모든 스크롤 이벤트에 의해 변경되어야 한다. 이를 구현하기 위해서는 컴포넌트가 마운트 될때 스크롤 이벤트 리스너를 등록하고, 언마운트 될 때 이 리스너를 제거해 주어야한다. 이럴 때 사용하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onMounted&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;onUnmounted&lt;/code&gt; API 함수들이 존재한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(역주) &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;는 현재 &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt;로 이름이 변경되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;template&amp;gt;생략..&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import { value, onMounted, onUnmounted } from 'vue-function-api'
export default {
  setup(props) {
    const pageOffset = value(0)
    const update = () =&amp;gt; {
        pageOffset.value = window.pageYOffset
    }

    onMounted(() =&amp;gt; window.addEventListener('scroll', update))
    onUnmounted(() =&amp;gt; window.removeEventListener('scroll', update))

    return {
      pageOffset
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.x 버전의 뷰가 가진 모든 라이프사이클훅에 해당하는 onXXX 함수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;setup()&lt;/code&gt; 내에서 사용할 수 있다는 것을 기억해라.&lt;/p&gt;

&lt;p&gt;위 예제를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;pageOffset&lt;/code&gt; 변수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.value&lt;/code&gt; 라는 반응형 속성을 포함하고 있다는것도 알아차렸을 것이다. 이렇게 한번 감싸진 프로퍼티를 사용하는 이유는 자바스크립트에서 숫자나 문자열같은 원시값들은 참조 &lt;sup&gt;reference&lt;/sup&gt; 로 전달되지 않기때문이다. 값 래퍼는 임의의 값 유형들에 대해 변경 가능하고 반응형인 참조를 전달할 수 있는 방법을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pageOffset&lt;/code&gt; 객체가 어떻게 구성되어 있는지는 다음을 참고한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;682&quot; alt=&quot;스크린샷 2019-09-25 오전 9 17 21&quot; src=&quot;https://user-images.githubusercontent.com/16642635/65559339-4bf49a80-df75-11e9-92cf-1ab433493740.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 사용자의 데이터를 서버에서 가져오는 기능을 구현할 차례다. 옵션 기반의 API를 사용할 때 뿐만 아니라 함수 기반 API를 사용할 때도 계산된 속성과 와쳐를 선언할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;script&amp;gt;
import {
    value,
    watch,
    computed,
    onMounted,
    onUnmounted
} from 'vue-function-api'
import { fetchUserPosts } from '@/api'
export default {
  setup(props) {
    const pageOffset = value(0)
    const isLoading = value(false)
    const posts = value([])
    const count = computed(() =&amp;gt; posts.value.length)
    const update = () =&amp;gt; {
      pageOffset.value = window.pageYOffset
    }

    onMounted(() =&amp;gt; window.addEventListener('scroll', update))
    onUnmounted(() =&amp;gt; window.removeEventListener('scroll', update))

    watch(
      () =&amp;gt; props.id,
      async id =&amp;gt; {
        isLoading.value = true
        posts.value = await fetchUserPosts(id)
        isLoading.value = false
      }
    )

    return {
      isLoading,
      pageOffset,
      posts,
      count
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;계산된 속성은 2.x 에서와 동일하게 동작한다. 의존하고 있는 값을 추적하고 오로지 이 값이 변경될 때만 다시 계산된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; 함수에 전달되는 첫번째 인자는 “source” 라고 하는데 다음중 하나를 넘겨줄 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getter 함수&lt;/li&gt;
  &lt;li&gt;value wrapper&lt;/li&gt;
  &lt;li&gt;위의 두 타입을 원소로 갖는 배열&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두번째 인자는 getter나 value wrapper의 값이 변경되었을 때 호출될 콜백이다.&lt;/p&gt;

&lt;p&gt;함수 기반의 API를 사용하여 합성될 컴포넌트를 구현하였다. 다음 단계는 이 로직들은 재사용 가능하게 만드는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;분해--️&quot;&gt;분해 🎻 ✂️&lt;/h2&gt;

&lt;p&gt;이 부분이 가장 흥미로운 부분인데, 논리와 관련된 코드를 재사용하기 위해 “composition function” 을 이용해 추출한 다음 반응형 상태를 반환할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import {
    value,
    watch,
    computed,
    onMounted,
    onUnmounted
} from 'vue-function-api'
import { fetchUserPosts } from '@/api'
function useScroll() {
    const pageOffset = value(0)
    const update = () =&amp;gt; {
        pageOffset.value = window.pageYOffset
    }
    onMounted(() =&amp;gt; window.addEventListener('scroll', update))
    onUnmounted(() =&amp;gt; window.removeEventListener('scroll', update))
    return { pageOffset }
}
function useFetchPosts(props) {
    const isLoading = value(false)
    const posts = value([])
    watch(
        () =&amp;gt; props.id,
        async id =&amp;gt; {
            isLoading.value = true
            posts.value = await fetchUserPosts(id)
            isLoading.value = false
        }
    )
    return { isLoading, posts }
}
export default {
    props: {
        id: Number
    },
    setup(props) {
        const { isLoading, posts } = useFetchPosts(props)
        const count = computed(() =&amp;gt; posts.value.length)
        return {
            ...useScroll(),
            isLoading,
            posts,
            count
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;어떻게 &lt;code class=&quot;highlighter-rouge&quot;&gt;useFetchPosts&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;useScroll&lt;/code&gt; 함수를 사용하여 반응형 속성을 반환하도록 하였는지 주목하라.&lt;/p&gt;

&lt;p&gt;이러한 함수들은 별도의 파일로 분리해낸 뒤 다른 컴포넌트에서도 사용할 수 있다. 기존의 옵션 기반의 해결책들과 비교해보면 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;템플릿에 노출되는 프로퍼티는 컴포지션 함수로부터 반환된 값이므로 명확한 출처를 갖는다.&lt;/li&gt;
  &lt;li&gt;컴포지션 함수로부터 반환된 값이므로 명확한 이름을 가지기 때문에 네임스페이스 충돌이 없다.&lt;/li&gt;
  &lt;li&gt;단순히 로직을 재활용하기 위해 쓸데없는 인스턴스를 생성하지 않아도 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공식 RFC 페이지를 참고하면 이보다 더 많은 이점들을 찾을 수 있다.
이 아티클에서 사용된 모든 예제 코드는 &lt;a href=&quot;https://github.com/enkot/vue-function-api-test&quot;&gt;여기&lt;/a&gt;서 확인할 수 있다.
동작하는 예제는 &lt;a href=&quot;https://enkot.github.io/vue-function-api-test/&quot;&gt;여기&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;</content><author><name>genie-youn</name></author><category term="vue" /><summary type="html">unsplash-logoKyaw Tun</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/kyaw-tun-_ABBh9ffIJU-unsplash.jpg" /></entry><entry><title type="html">Vue는 왜 filter를 삭제하려고 했을까?</title><link href="http://localhost:4000/journal/Vue%EB%8A%94-%EC%99%9C-Filter%EB%A5%BC-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4-%ED%96%88%EC%9D%84%EA%B9%8C.html" rel="alternate" type="text/html" title="Vue는 왜 filter를 삭제하려고 했을까?" /><published>2019-06-19T00:00:00+09:00</published><updated>2019-06-19T00:00:00+09:00</updated><id>http://localhost:4000/journal/Vue%EB%8A%94-%EC%99%9C-Filter%EB%A5%BC-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4-%ED%96%88%EC%9D%84%EA%B9%8C</id><content type="html" xml:base="http://localhost:4000/journal/Vue%EB%8A%94-%EC%99%9C-Filter%EB%A5%BC-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4-%ED%96%88%EC%9D%84%EA%B9%8C.html">&lt;center&gt;&lt;small&gt;Photo by frank &lt;a href=&quot;https://unsplash.com/@foodiesfeed?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Jakub Kapusnak&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;지나가다 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;에 값이 변경될 때만 다시 랜더링하게 해달라는 이슈를 보았고, 그 댓글에 뷰의 메인테이너인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Evan You&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 를 3.0에서 삭제하고 싶었지만, 2.0에서 삭제되었다가 커뮤니티의 요청으로 가장 일반적인 문법만이 다시 추가되었다는 이야기를 남긴걸 보고 2.0 설계 쓰레드에서 왜 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 가 삭제될 뻔 했는지를 따라가 보았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;쓰레드 원글은 https://github.com/vuejs/vue/issues/2756 여기를 참고하면 된다.
추가로 본래 이슈는 https://github.com/vuejs/rfcs/pull/6 여기를 참고하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;무려 9개월간 논의된 이 쓰레드에는 v2.0 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;의 삭제를 두고 의견이 팽팽히 대립되는걸 볼 수 있었다.&lt;/p&gt;

&lt;p&gt;과거 (2.0 이전) 뷰의 필터는 다음과 같은 파이프 라인 문법과 기본 필터들을 지원하였다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;thing in things | filterBy 'foo' | orderBy 'bar' | limitBy 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;뷰 코어 팀이 필터를 삭제한 이유는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;초보자에게 직관적이지가 않다.
    &lt;ul&gt;
      &lt;li&gt;필터는 기본적으로 함수이다.&lt;/li&gt;
      &lt;li&gt;그렇지만 일반적인 함수 호출과는 그 생김새가 다르다 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt; 처럼 괄호로 호출할 수 없다.&lt;/li&gt;
      &lt;li&gt;계산된 속성등의 다른곳에서 사용이 불가능하고 오로지 템플릿안에서 파이프라인 문법을 통한 사용만이 가능하다.&lt;/li&gt;
      &lt;li&gt;초보자에게 예외사항은 허들이 된다. 필터는 함수임에도 불구하고 특별한 문법과 어느 상황에서나 사용할 수는 없다는 제약이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파이프라인 문법에 대한 &lt;a href=&quot;http://tc39.github.io/proposal-pipeline-operator/&quot;&gt;초안&lt;/a&gt;이 tc39 에 올라온 상태. 정식 문법으로 채택되면 현재 필터에서 사용하는 파이프라인 문법과 헷갈릴 여지가 있으며, 이때 자바스크립트 표준을 따르는게 옳지 않을까?&lt;/li&gt;
  &lt;li&gt;뷰는 유틸리티 라이브러리가 아니다.
    &lt;ul&gt;
      &lt;li&gt;통화와 날짜를 다루고, 배열을 필터링하는건 뷰의 관심도 아니고, 뷰보다 훨씬 더 좋은 라이브러리들이 많다.&lt;/li&gt;
      &lt;li&gt;Accounting.js를 통해 통화를 다루고 Moment.js로 날짜를 다루고 pluralize로 복수화를 하고 json을 통해 직렬화를 할것을 권장한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;필터를 사용하는 대신 다음과 같은 방법을 권장하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필터를 사용하는 대신 계산된 속성을 사용할것.&lt;/li&gt;
  &lt;li&gt;계산된 속성의 값은 컴포넌트의 어디서나 쉽게 재사용될 수 있다.&lt;/li&gt;
  &lt;li&gt;필터와 마찬가지로 템플릿으로부터 구현의 상세내용을 분리시켜 깔끔한 상태를 유지할 있다.&lt;/li&gt;
  &lt;li&gt;필터는 전역으로 선언되어 이 필터가 어떻게 동작하는지 확인하려면 해당 함수가 선언된 파일을 열어서 찾아봐야하지만, 계산된 속성은 해당 관심이 컴포넌트내에 명확하게 존재한다.&lt;/li&gt;
  &lt;li&gt;배열에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; 를 통해 체이닝 하는것이 파이프라인 문법과 똑같은 역할을 하면서도 더 선언적이고 쉽게 조작할 수 있다.&lt;/li&gt;
  &lt;li&gt;글로벌 선언의 유용성이 꼭 필요하다면?
    &lt;ul&gt;
      &lt;li&gt;만약 글로벌 선언이 필터를 사용하는 큰 이유라면 뷰 인스턴스에 선언하면 된다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.prototype.whateverIWant = mySuperCoolFunction&lt;/code&gt; 이렇게&lt;/li&gt;
      &lt;li&gt;하지만 이 방식은 그다지 추천하지 않는다. 헬퍼 메소드를 모듈로 분리하여 이것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 하여 사용할 것을 권장한다.&lt;/li&gt;
      &lt;li&gt;하지만 핵심은 필터없이도 글로벌한게 선언하는것이 어렵지 않다는것을 설명하는 것이다. 즉, 글로벌 선언과 필터는 별개의 솔루션이라는 이야기다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;필터가 유용한것은 사실이지만 순수 javascript의 함수와 같은 일을 하면서도 함수처럼 유연한 사용이 불가능한점, 표준으로 파이프라인 문법이 &lt;code class=&quot;highlighter-rouge&quot;&gt;draft&lt;/code&gt;로 올라와 있는점이 filter를 삭제하려는 가장 큰 이유라고 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;하지만 커뮤니티의 반응은 사뭇 달랐다. 필터를 다시 복원해달라는 의견이 지배적이였다. 다음과 같은 논의들이 오고갔다.&lt;/p&gt;

&lt;p&gt;Q1. 만약 필터를 사용하지 않으면 다음과 같이 코드를 작성해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item in filteredItems&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;filteredItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매번 이렇게 쓸려면 얼마나 번거롭겠는가?&lt;/p&gt;

&lt;p&gt;또한 파이프 라인 문법이 없으면 다음과 같은 코드를 작성해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;word in filters.limitBy(filters.orderBy(filters.filterBy(words, userInput), column, -1), limit)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;얼마나 번거롭겠는가?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;본인도 그렇고, 이 의견을 본 많은 사람들도 그렇고 두번째 예제는 적절치 않은것 같다. 템플릿이 너무 많은 관심을 가지고 있기 때문인데, 해당 관심은 계산된 속성으로 분리하는게 더 나은 방법같아 보인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A1. 첫번째 예제에 대해선 매번 컴포넌트에 작성하는게 번거롭다면 global Mixin 을 쓰거나, 메소드를 모듈로 분리하거나, 계산된 속성 함수로 모듈을 분리하거나..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 경우에도 매번 import 시켜주는것 또한 번거로운 일로 느껴지는것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Q2. 자바스크립트의 표준 문법과 헷갈릴 여지가 있다면 차라리 ES7 스타일로 필터의 파이프라인 문법을를 변경하는건?&lt;/p&gt;

&lt;p&gt;A2. 그것도 2.0에 바벨을 통해 적용될 예정 렌더 함수 코드를 파이프를 통해 사용할 수 있게 할 것이다. 순수한 자바스크립트를 헤치지 않는 선에서&lt;/p&gt;

&lt;p&gt;Q3. 객체지향적인 관점에서 보면 필터는 static한 순수함수에 가깝고 method는 그렇지 않다. 이런 이질적인 속성을 methods 안에 넣으라는건 조금 이상하지 않나?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 질문에 대한 답은 딱히 없었던것 같다. 나도 이 의견에 동의한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Q4. 필터의 삭제를 반대하는 사람들이 이야기하는 필터의 주요 피처는 글로벌, 체이닝, 파이프라인 문법이다.
좀더 순수한 자바스크립트로 다가가는것은 인정하지만, 그것이 꼭 프레임워크에서 최우선적으로 고려해야 할 일인가?
리액트 대신 뷰를 선택하는 많은 이들이 고려하는 가치는 러닝커브이고, js를 잘 다루지 못하는 사람들도 쉽게 익혀서 쓸 수 있다는 점이다. lavarel이 프론트 프레임워크로 Vue를 채택한것도 비슷한 맥락일것.&lt;/p&gt;

&lt;p&gt;뷰를 사용하는 사람이 모두 훌륭한 자바스크립트 개발자는 아니다. 심지어 디자이너들도 있다. 뷰는 템플릿엔진/시스템 그 이상이지만 템플릿엔진/시스템의 역할도 가지고 있다. 다른 템플릿엔진들이 자바스크립트가 아닌 프레임워크만 익혀서 사용할 수 있도록 기본적인 내장필터를 가진것처럼 뷰도 이와 비슷한 맥락으로 쉽게 익혀서 사용할 수 있었던 필터를 유지해주었으면 좋겟다.&lt;/p&gt;

&lt;p&gt;뷰를 자바스크립트를 배우지 않고 사용할 수 없지만, 기본적으로 충실하게 동작하게 하면 비개발자들 (디자이너를 포함해서)도 쉽게 접근할 수 있고, 그들이 뷰를 사용하다가 기본적인 동작만으로 부족하게 되면 그때 자바스크립트를 익히고 best practice를 찾아 학습할 것이다&lt;/p&gt;

&lt;p&gt;A4. 파이프라인 문법이 필요한거라면 TC39의 스펙이 표준으로 정의되기전 바벨을 통해 사용할 수 있다. 그건 바벨의 관심이고 UI의 관심은 아닌것같다. 만약 뷰가 필터가 처음부터 없었더라면 javascript 문법을 확장해서 새로운 문법을 만들어달라고 요청했을 것인가?&lt;/p&gt;

&lt;p&gt;개발자가 아닌 사람들, 그리고 초심자들에 대한 이야기를 했는데 물론 이들의 관점도 고려를 하고 있다. (실제로 뷰 코어팀에는 디자이너들도 존재하고, 매일 업무로 뷰를 사용하고 있다) 이 사람들에게 필터는 처음에는 마법같아 보일지 모르지만 곧 배우는데 더 복잡하고 한계를 마주치게 될 것이다.&lt;/p&gt;

&lt;p&gt;Q5. 장고에도있고 twig에도 있는 필터를 왜 없애려고하냐! {} 안의 영역은 html도 javascript도 아닌 템플릿의 영역인데! 왜! 자꾸! js! 를!&lt;/p&gt;

&lt;p&gt;A5. 템플릿 프레임워크의 특징들은 서버사이드 템플릿 언어에서는 필요한 기능이다 (계산된 속성도 없고 표현도 한계가 있으니) 하지만 뷰와 같은 유연성 높은 프론트 사이드 템플릿에서는 별로 필요하지 않은것 같다. 뷰가 생각하는 템플릿은 DOM과의 상호작용을 나타내고 있다. 앞서말한 서버사이드 템플릿 엔진이 정적인 문자열 출력을 만들어 내는것과는 달리. 양반향 바인딩이나, 이벤트를 핸들링하거나 등등.. 필터는 뷰의 환경에서 특수한 한정된 유즈 케이스에 맞춰저 있는 문법이다. 필터를 유지하는 한가지 대안은 {{ }} 안에서만 텍스트를 변형하기 위해 사용하는것이야.&lt;/p&gt;

&lt;p&gt;Q6. 배열을 정렬하는등 조작하는건 계산된 속성이 하는게 명확하기 때문에 더 낫다. 하지만 데이터를 여러 포맷으로 보여주는건? 이걸 매번 메소드에 정의하는게 맞아? 성능상으로도 더 안좋잖아? 모든 객체에 프로퍼티로 포함되어야 할테니?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 부분이 2.0 이후에 filter를 남기는 결정적인 이유가 된듯 하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— 그래서 최종적으로 Vue는 filter를 다시 되돌리게 된다. 다만 기능이 많이 간소화되었다.&lt;/p&gt;

&lt;p&gt;오로지 {{ }} 내부에서만 사용해야하고, 논리적인 로직은 자바스크립트영역에서 하면서 텍스트를 포맷팅 하는 용도로만 사용해야 한다.
빌트인 필터는 삭제된다. 필요하다면 커뮤니티에서 플러그인이나 라이브러리를 만들어 배포할 수 있다.
필터 구문은 공백으로 인자를 받지 않고, 함수 호출 구문을 사용하여 표시한다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;오픈소스 프로젝트가 어떻게 커뮤니티와 상생하며 발전해나가는지 볼 수 있어서 좋았던 경험이였다. 특히 메인테이너인 Evan You가 커뮤니케이션 하는 모습은 인상깊었다. 토론에 참여하는 사람들이 차분해질 수 있도록, 그들이 사용하는 워딩을 환기시키며 대화를 이끌어 가는 모습이 앞으로 협업하는데 좋은 참고가 될 것 같다.&lt;/p&gt;</content><author><name>genie-youn</name></author><category term="vue" /><category term="filter" /><summary type="html">Photo by frank Jakub Kapusnak on Unsplash</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/jakub-kapusnak-Rt2t11IUizs-unsplash.jpg" /></entry><entry><title type="html">Vue 디렉티브와 Hook</title><link href="http://localhost:4000/journal/Vue%EC%99%80-Custom-Directive.html" rel="alternate" type="text/html" title="Vue 디렉티브와 Hook" /><published>2019-04-26T00:00:00+09:00</published><updated>2019-04-26T00:00:00+09:00</updated><id>http://localhost:4000/journal/Vue%EC%99%80-Custom-Directive</id><content type="html" xml:base="http://localhost:4000/journal/Vue%EC%99%80-Custom-Directive.html">&lt;center&gt;&lt;small&gt;Photo by frank &lt;a href=&quot;https://unsplash.com/@35mm?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;35mm&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;이번엔 커스텀하게 만든 디렉티브가 예상치 못한 버그를 만들어내서 디버깅을 찍다보니 &lt;code class=&quot;highlighter-rouge&quot;&gt;unbind&lt;/code&gt; 훅을 제대로 구현해 주지 않아 디렉티브 내부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHTML&lt;/code&gt; 이 제대로 초기화되지 않아서 발생한 이슈였다. 이 참에 Vue 와 디렉티브에 관하여 정리하려 한다.&lt;/p&gt;

&lt;h2 id=&quot;directive&quot;&gt;Directive?&lt;/h2&gt;

&lt;p&gt;디렉티브는 &lt;code class=&quot;highlighter-rouge&quot;&gt;v-&lt;/code&gt; 접두어를 가진 특별한 attribute 이다. 값으로 단일 자바스크립트 표현식을 받으며 하는 일은 이 표현식의 결과값이 변경되었을 때 ‘반응형’으로 DOM 에 side-effect 를 적용하는 것이다.&lt;/p&gt;

&lt;p&gt;가장 처음 접하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;v-if&lt;/code&gt;가 디렉티브중 하나인데&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;seen&lt;/code&gt; 의 값의 변경에 따라 반응하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;seen&lt;/code&gt; 이 truthy 한 값으로 변경되면 DOM에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 엘리먼트를 추가하고 falsy 한 값으로 변경되면 DOM에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 엘리먼트를 삭제하게 된다.&lt;/p&gt;

&lt;h2 id=&quot;custom-directive&quot;&gt;Custom Directive?&lt;/h2&gt;

&lt;p&gt;사용자 정의 디렉티브 (custom directive) 란 말 그대로 개발자가 정의한 디렉티브이다. 즉, 전달받은 표현식의 값에 따라 반응형으로 DOM 에 side-effect 를 주는 컴포넌트라고 할 수 있겠다.&lt;/p&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;Vue는 주어진 문자열을 &lt;code class=&quot;highlighter-rouge&quot;&gt;innerHTML&lt;/code&gt; 에 넣어 HTML 렌더링 하는 디렉티브로 &lt;code class=&quot;highlighter-rouge&quot;&gt;v-html&lt;/code&gt; 디렉티브를 제공한다. 다만 기본적인 XSS 를 방어할 수 있는 디렉티브는 따로 제공하지 않고, 그럴 생각도 없다고 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/vuejs/vue/issues/7860&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제가 되는 경우는 NCR 을 렌더링 해야 하는 경우인데, 렌더링은 해야겠고 XSS는 막아야겠으니 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 만 escape 하는 커스텀 디렉티브를 만들어야겠다고 결심한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NCR (Numeric Character Reference) 에 대해서는 다음을 참고하자. https://en.wikipedia.org/wiki/Numeric_character_reference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아마 다음과 같이 구현할 수 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;escapeTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fakeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;escape-tag&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;escapeTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;span class=&quot;test&quot; v-escape-tag='&quot;&amp;amp;#9822&quot;'&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-escape-tag&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#9822&lt;/code&gt; 를 넣으면 의도한대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;♞&lt;/code&gt; 가 출력되는걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이 디렉티브가 virtual dom 과 만나면 굉장히 기묘한 일이 발생하게 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;span v-if=&quot;!a&quot; class=&quot;test&quot; v-escape-tag=&quot;'&amp;amp;#9822'&quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;span v-if=&quot;a&quot; class=&quot;test&quot;&amp;gt;기본 텍스트&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;의 값에 따라서 두 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 중 하나를 노출한다고 가정해보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 가 처음에 false 일때는 ‘♞’ 만 보이다가 true로 바뀌는 순간 ‘♞기본 텍스트’ 로 노출되게 된다.
분명 다른 element 로 변경되었는데 기존에 있던 ‘♞’가 지워지지 않게 된것.&lt;/p&gt;

&lt;p&gt;그 이유는 첫번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; 에서 두번째 &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; 으로 변경될 때 뷰의 virtual dom 이 해당 element 를 재활용하기 때문인데, 디렉티브가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unbind&lt;/code&gt; 될 때의 훅이 설정되어 있지 않아서 ♞가 지워지지 않고 남아있게 되는것이다.&lt;/p&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;

&lt;p&gt;해결책은 간단한데, &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.directive(...)&lt;/code&gt;의 인자로 함수가 아니라 각 훅마다 동작할 콜백이 정의된 객체를 넘기는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;escape-tag&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fakeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unbind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// unbind 될 때 innerText 를 초기화 해 준다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.directive()&lt;/code&gt; 함수 파라미터로 전달해줄 객체에 선언할 수 있는 훅은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bind: 디렉티브가 엘리먼트에 처음 바인딩 되었을 때&lt;/li&gt;
  &lt;li&gt;inserted: 바인딩 된 엘리먼트가 부모 노드에 삽입되었을 &lt;/li&gt;
  &lt;li&gt;update: 포함하는 컴포넌트가 업데이트 되었을 때, 하지만 자식 컴포넌트가 업데이트 된 것을 보장하지는 않는다.&lt;/li&gt;
  &lt;li&gt;componentUpdated: 포함하는 컴포넌트와, 그 컴포넌트의 자식 컴포넌트가 모두 업데이트 되었을 때&lt;/li&gt;
  &lt;li&gt;unbind: 디렉티브가 엘리먼트에 처음 언바인딩 되었을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각 훅에 파라미터로 전달되는 객체는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;el: 디렉티브가 바인딩될 엘리먼트&lt;/li&gt;
  &lt;li&gt;binding
    &lt;ul&gt;
      &lt;li&gt;name: 디렉티브 이름, v- 프리픽스가 없습니다.&lt;/li&gt;
      &lt;li&gt;value: 디렉티브에서 전달받은 값.&lt;/li&gt;
      &lt;li&gt;oldValue: 이전 값.&lt;/li&gt;
      &lt;li&gt;expression: 표현식 문자열. v-my-directive=”1 + 1” -&amp;gt; “1 + 1”&lt;/li&gt;
      &lt;li&gt;arg: 디렉티브의 전달인자, 있는 경우에만 존재합니다. v-my-directive:foo -&amp;gt; “foo”&lt;/li&gt;
      &lt;li&gt;modifiers: 포함된 수식어 객체, 있는 경우에만 존재한다. v-my-directive.foo.bar -&amp;gt; { foo: true, bar: true }&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;vnode: Vue 컴파일러가 만든 버추얼 노드.&lt;/li&gt;
  &lt;li&gt;oldVnode: 이전의 버추얼 노드.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;Custom Directive 를 구현할 때는 상황에 맞게 훅을 구현해주는것이 좋다.&lt;/p&gt;</content><author><name>genie-youn</name></author><category term="vue" /><summary type="html">Photo by frank 35mm on Unsplash</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/35mm-IstXvxHGoA4-unsplash.jpg" /></entry><entry><title type="html">intellij에서 webpack path alias 적용하기</title><link href="http://localhost:4000/journal/Intellij%EC%97%90%EC%84%9C-webpack-path-alias-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="intellij에서 webpack path alias 적용하기" /><published>2019-04-11T00:00:00+09:00</published><updated>2019-04-11T00:00:00+09:00</updated><id>http://localhost:4000/journal/Intellij%EC%97%90%EC%84%9C-webpack-path-alias-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/journal/Intellij%EC%97%90%EC%84%9C-webpack-path-alias-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0.html">&lt;center&gt;&lt;small&gt;Photo by Fotis Fotopoulos on Unsplash&lt;/small&gt;&lt;/center&gt;

&lt;h2 id=&quot;webpack-path-alias&quot;&gt;Webpack path alias&lt;/h2&gt;

&lt;p&gt;Webpack 은 다른 모듈을 불러오는걸 좀 더 간편하게 하기 위해 다음과 같은 설정을 제공한다. 예를들면&lt;/p&gt;

&lt;p&gt;webpack.config.js&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;@:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;src/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;test/unit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;src/commons/utils/functions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;불필요하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;src/components&lt;/code&gt; 이런 경로가 반복되서 나타나지 않으니 참 간편하긴 한데, 문제는 intellij 에서 이렇게 불러올 경우 해당 모듈을 찾지도 못하고, 그로 인해 code assistant 도 동작하지 않는다..&lt;/p&gt;

&lt;p&gt;해결책은 간단하다. intellij 에 해당 웹팩 설정파일 경로를 잡아주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preference&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Languages&amp;amp;Frameworks&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Webpack&lt;/code&gt; 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 파일의 경로를 넣어주면 잘 찾아준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/16642635/54926134-0cf87480-4f53-11e9-9dfa-266c06b50d03.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;with-vue-cli&quot;&gt;with Vue-cli&lt;/h2&gt;

&lt;p&gt;vue-cli 와 함께 사용할 경우 설정파일로 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue.config.js&lt;/code&gt; 파일을 사용하게 되어 있다. 이때 alias 설정은 그대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue.config.js&lt;/code&gt; 파일에 하고 인텔리제이에게만 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/@vue/cli-service/webpack.config.js&lt;/code&gt; 파일을 잡아주면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://cli.vuejs.org/guide/webpack.html#using-resolved-config-as-a-file 를 참고한다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>genie-youn</name></author><category term="webpack" /><category term="vue" /><category term="intellij" /><category term="webpack" /><summary type="html">Photo by Fotis Fotopoulos on Unsplash</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/fotis-fotopoulos-LJ9KY8pIH3E-unsplash.jpg" /></entry><entry><title type="html">Vue와 반응형에 대해서 (Data)</title><link href="http://localhost:4000/journal/Vue%EC%99%80-%EB%B0%98%EC%9D%91%ED%98%95-DATA.html" rel="alternate" type="text/html" title="Vue와 반응형에 대해서 (Data)" /><published>2019-04-07T00:00:00+09:00</published><updated>2019-04-07T00:00:00+09:00</updated><id>http://localhost:4000/journal/Vue%EC%99%80-%EB%B0%98%EC%9D%91%ED%98%95-DATA</id><content type="html" xml:base="http://localhost:4000/journal/Vue%EC%99%80-%EB%B0%98%EC%9D%91%ED%98%95-DATA.html">&lt;center&gt;&lt;small&gt;Photo by frank &lt;a href=&quot;https://unsplash.com/@frankiefoto?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;mckenna&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/&quot;&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;얼마 전 특정 유저의 상태에 따라 알림 레이어를 노출해야 하는 스펙을 구현중에 의도한 대로 동작하지 않아 한참을 해맸다. Vue 의 반응형이 어떻게 동작하는지 제대로 이해하고 있지 않아 생긴 문제였고 이 기회에 Vue와 반응형에 대하여 정리하려 한다.&lt;/p&gt;

&lt;h2 id=&quot;반응형&quot;&gt;반응형?&lt;/h2&gt;

&lt;p&gt;Vue에서 반응형 &lt;sup&gt;Reactivity&lt;/sup&gt; 이란 Vue 인스턴스에 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 프로퍼티로 자바스크립트 객체를 전달하면 이 객체의 변경을 감지하여 전파하는것을 일컫는다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hello world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 컴포넌트가 존재할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 의 값이 바뀌면 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 내부의 문자열도 이에 &lt;strong&gt;반응&lt;/strong&gt; 하여 변경되게 된다.&lt;/p&gt;

&lt;h2 id=&quot;반응형이-적용되는-과정&quot;&gt;반응형이 적용되는 과정&lt;/h2&gt;

&lt;p&gt;Vue 인스턴스에서 반응형은 이벤트와 라이프사이클이 초기화 된 이후 설정된다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;beforeCreate&lt;/code&gt; 훅과 &lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt; 훅 사이)&lt;/p&gt;

&lt;p&gt;core/instance/init.js&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;callHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;beforeCreate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initInjections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 여기서 반응형 설정이 이루어진다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;initProvide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;callHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 시점에 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; 에 대한 초기화가 이루어 진다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;__ob__&lt;/code&gt; 라는 이름의 옵저버 객체를 프로퍼티로 등록한 후 각 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; 들을 순회하면서 해당 프로퍼티가 수정 가능하다면 (&lt;code class=&quot;highlighter-rouge&quot;&gt;configurable&lt;/code&gt;) &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveGetter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveSetter&lt;/code&gt; 를 각각 프로퍼티의 getter 와 setter 로 등록한다. 또한 각각의 프로퍼티는 클로저로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dep&lt;/code&gt; 이라는 다수의 Subscriber 를 가질 수 있는 객체를 가지게 되고 템플릿의 디렉티브는 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dep&lt;/code&gt; 객체를 구독하게 된다.&lt;/p&gt;

&lt;p&gt;core/observer/index.js defineReactive()&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactiveGetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactiveSetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; 하는 과정에서 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; (Subscriber) 객체를 생성하고 뷰 인스턴스를 업데이트 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;vm._update()&lt;/code&gt; 함수를 변경이 생겼을 때 실행할 함수로 넣어둔다. &lt;code class=&quot;highlighter-rouge&quot;&gt;vm._update()&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;vm._render()&lt;/code&gt; 함수를 실행한 결과인 &lt;code class=&quot;highlighter-rouge&quot;&gt;vnode&lt;/code&gt; 객체를 받아서 DOM 을 업데이트한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;updateComponent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hydrating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;noop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_isMounted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_isDestroyed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;callHook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;beforeUpdate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* isRenderWatcher */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Watcher constructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;expOrFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isRenderWatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRenderWatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_watcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;vm._watcher&lt;/code&gt; 프로퍼티에 등록하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher.get()&lt;/code&gt; 을 통해 뷰 인스턴스를 한번 업데이트를 한다. 렌더링 함수를 호출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; 내의 구문을 컴파일하고 템플릿의 디렉티브에서 참조하고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 프로퍼티의 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;를 호출하게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; 로 등록된 &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveGetter&lt;/code&gt;를 자세히 보면&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactiveGetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;depend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childOb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;childOb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;depend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dependArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dep.target&lt;/code&gt; 에는 앞서 뷰 인스턴스를 업데이트 하는 함수를 담고있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; 객체가 들어있다. 그래서 프로퍼티가 참조하고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dep&lt;/code&gt; 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;depend()&lt;/code&gt; 함수를 호출하게 된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Dep (Observable) 객체의 함수다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;depend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addDep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 앞서 등록된 `Watcher` (Subscriber) 객체의 함수다&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;addDep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newDepIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newDepIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newDeps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;depIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addSub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 핑퐁을 거쳐 해당 프로퍼티의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dep(Observable)&lt;/code&gt; 을 뷰 인스턴스를 업데이트 하는 함수를 가진 &lt;code class=&quot;highlighter-rouge&quot;&gt;Wathcer(Subscriber)&lt;/code&gt; 의 구독이 등록되게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이런식으로 Dep 과 Wathcer 가 서로 핑퐁을 하면서 구독 등록의 과정이 이루어 지는데 중간에 this 가 계속 인자로 주어지다 보니 코드가 읽기가 많이 헷갈렸던것 같다..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 의 값을 변경하게 되면 setter 로 등록해 두었던 &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveSetter&lt;/code&gt; 함수가 호출되게 된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactiveSetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* eslint-disable no-self-compare */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* eslint-enable no-self-compare */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// #7981: for accessor properties without setter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;childOb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새로 받은 값을 set 하고 나면 프로퍼티의 &lt;code class=&quot;highlighter-rouge&quot;&gt;dep (Observable)&lt;/code&gt; 객체에 &lt;code class=&quot;highlighter-rouge&quot;&gt;notify&lt;/code&gt; 를 호출하여 상태의 전파를 일으킨다.&lt;/p&gt;

&lt;p&gt;이 객체를 구독하고 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;Watcher&lt;/code&gt; 객체가 &lt;code class=&quot;highlighter-rouge&quot;&gt;updateComponent&lt;/code&gt; 함수를 실행시켜 변경된 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 의 값을 읽어가고 virtual dom 을 계산하고 변경된 부분을 다시 렌더링 함으로써 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 의 값에 템플릿 내 디렉티브가 반응형으로 동작하게 된다.&lt;/p&gt;

&lt;p&gt;객체를 초기화 하는 과정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 객체에 있는 프로퍼티를 순회하며 반응형을 설정하기 때문에 이 시점에 존재하지 않았던 프로퍼티에 대해서는 반응형으로 동작하지 않게 된다. 초기화 이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 객체에 프로퍼티를 아무리 추가해봤자 변경을 감지하지 못한다는 이야기다. 그렇기 때문에 빈 값으로라도 초기에 선언하여 인스턴스를 초기화 해야 하는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;놓치기-쉬운것들&quot;&gt;놓치기 쉬운것들&lt;/h2&gt;

&lt;h3 id=&quot;중첩된-객체&quot;&gt;중첩된 객체&lt;/h3&gt;

&lt;p&gt;만약 반응형으로 동작해야할 값이 중첩된 객체라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 객체의 key 를 순회하며 반응형을 설정하는 과정에서 내부 객체를 재귀적으로 훑으며 반응형을 설정하므로 &lt;strong&gt;중첩된 객체의 프로퍼티 또한 빈값으로라도 선언되어 있어야 한다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;코드를 보다가 이부분이 좀 헷갈렸는데 분명 &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveSetter&lt;/code&gt; 내부에도 새로 받은 값에 대해서 재귀적으로 반응형하는 부분이 있었기 때문에 그렇다면 루트 수준에만 존재하면 자동으로 반응형이 되지 않나? 하고 생각했었다. 예를들어&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 컴포넌트가 있을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 에는 이미 반응형이 설정되어 있으니, &lt;code class=&quot;highlighter-rouge&quot;&gt;vm.a.c = {d : 1}&lt;/code&gt; 라고 주어졌을때 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveSetter&lt;/code&gt; 가 호출될것이고, 그러면 &lt;code class=&quot;highlighter-rouge&quot;&gt;{d : 1}&lt;/code&gt; 객체에 대해서도 반응형이 잡히겠지. 하고 생각한 것인데 이는 기존에 알고있던 중첩된 객체의 프로퍼티 또한 빈값으로라도 선언이 되어 있어야 한다는 사실과 어긋나는 것이였다.&lt;/p&gt;

&lt;p&gt;그 이유는 단순하게 자바스크립트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a.c = 4&lt;/code&gt; 를 주었을 때 a 의 setter 가 호출되지 않는다. c 에 대한 setter 를 호출할뿐..&lt;/p&gt;

&lt;p&gt;위 상황에서는 a 와 b 모두 재귀적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveSetter&lt;/code&gt; 가 등록되어 있으니 &lt;code class=&quot;highlighter-rouge&quot;&gt;data.a.b = 3&lt;/code&gt; 은 반응형을 타겠지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;data.a.c = 3&lt;/code&gt; 은 c 에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;reactiveSetter&lt;/code&gt; 가 등록되어 있지 않으니 반응형을 타지 않는다. 이럴때 사용하기위해 만들어둔 API 가 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.set&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;루트 수준 (&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; 객체의 직접적인 프로퍼티) 에 반응형을 추가하는 방법은 존재하지 않지만, 초기화시 존재했던 중첩된 프로퍼티 객체에 새로운 프로퍼티를 추가할 수 있는 API 는 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 또는&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마찬가지로 다음과 같은 케이스도 반응형으로 동작하지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;favoriteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Vue Green&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;setter 를 명시적으로 호출해주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userProfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userProfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;favoriteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Vue Green&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;배열&quot;&gt;배열&lt;/h3&gt;

&lt;p&gt;두번째로 놓치기 쉬운게 배열이다. 뷰가 일반 객체의 setter 를 조작해 반응형을 태우는것 처럼 배열도 배열의 몇가지 함수를 조작해 반응형을 태운다.&lt;/p&gt;

&lt;p&gt;우선 반응형의 대상이 되는 객체의 타입이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; 일 경우 이 객체의 프로토타입을 기존의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype&lt;/code&gt; 객체를 확장한 커스텀 객체로 변경한다&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayProto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayProto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;methodsToPatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Intercept mutating methods and emit events
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;methodsToPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// cache original method&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrayProto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mutator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__ob__&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observeArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// notify change&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;확장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype&lt;/code&gt; 객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;unshift&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;splice&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt; 함수들에 대하여 호출될 때마다 변경사항을 구독자들에게 전파하고 특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;unshift&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;splice&lt;/code&gt; 의 경우 새롭게 배열에 추가된 객체에 대하여 반응형을 설정한다. 즉 위 함수외에는 배열이 변경되어도 변경된 내용이 반응형으로 동작하지 않게된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arr[1] = &quot;abc&quot;;&lt;/code&gt; 와 같은 방법으로 배열을 변경하지 않도록 하자&lt;/p&gt;</content><author><name>genie-youn</name></author><category term="vue" /><category term="reactive" /><summary type="html">Photo by frank mckenna on Unsplash</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/frank-mckenna-iVVBVb2RqLc-unsplash.jpg" /></entry><entry><title type="html">Cloud Native day Seoul 2018 후기</title><link href="http://localhost:4000/journal/Cloud-Native-day-Seoul-2018.html" rel="alternate" type="text/html" title="Cloud Native day Seoul 2018 후기" /><published>2018-06-05T00:00:00+09:00</published><updated>2018-06-05T00:00:00+09:00</updated><id>http://localhost:4000/journal/Cloud-Native-day-Seoul-2018</id><content type="html" xml:base="http://localhost:4000/journal/Cloud-Native-day-Seoul-2018.html">&lt;p&gt;Pivotal이 한국에서 처음 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud Native Day&lt;/code&gt;라는 이름으로 세미나를 진행하였다. Spring의 리드그룹인 Pivotal이 어떤 방향성을 갖고 있는지 궁금하기도 했고, 혹시 향후에 Spring으로 MSA를 개발할 때 도움이 될까 싶어 참여하게 됐다.
히로쿠의 &lt;a href=&quot;https://12factor.net/ko/&quot;&gt;The Twelve-Factor app&lt;/a&gt; 같은걸 기대하고 갔다.&lt;/p&gt;

&lt;p&gt;진행세션은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;환영사 및 글로벌 트렌드 소개
클라우드 네이티브로의 전환을 위한 여정과 성공사례
넷플릭스 서비스와 피보탈
Spring Project와 Pivotal Cloud Foundry의 최신 업데이트
Google Cloud Platform을 통한 Pivotal Cloud Foundry의 확장
클라우드 네이티브 엔터프라이즈 사례 발표 (Case studies)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;세션2-클라우드-네이티브로의-전환을-위한-여정과-성공사례&quot;&gt;세션2. 클라우드 네이티브로의 전환을 위한 여정과 성공사례&lt;/h2&gt;

&lt;p&gt;클라우드 네이티브는 세가지로 구성된다고 할 수 있다. devOps, Cloud Native App(Microservice Architecture), Organazation / Process.&lt;/p&gt;

&lt;h3 id=&quot;데브옵스&quot;&gt;데브옵스&lt;/h3&gt;

&lt;p&gt;데브옵스는 애플리케이션과 서비스를 빠른 속도로 제공할 수 있도록 조직의 역량을 향상시키는 문화 철학, 방식 및 도구의 조합입니다. 기존의 소프트웨어 개발 및 인프라 관리 프로세스를 사용하는 조직보다 제품을 더 빠르게 혁신하고 개선할 수 있습니다. 이러한 빠른 속도를 통해 조직은 고객을 더 잘 지원하고 시장에서 좀 더 효과적으로 경쟁할 수 있습니다. - &lt;em&gt;&lt;a href=&quot;https://aws.amazon.com/ko/devops/what-is-devops/&quot;&gt;amazon&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;이 말이 제일 인상깊었다. Optimizing time to value. 변화하는 요구사항에 맞춰 코드를 작성하고, 이 코드가 실제 사용자에게 도달하여 가치를 창출하는 시간을 줄여라. 그리고 그 사용자의 피드백을 빠르게 받아들여라.&lt;/p&gt;

&lt;p&gt;이를 위해 빌드/배포 파이프라인을 구성하고 지속적통합, 지속적전달을 통해 빌드/배포를 자동화하여 빠르고 쉽게 만들것.
Platform팀은 개발자들이 비즈니스 로직을 코드로 구현하는데 집중하게 하기 위해 코드형 인프라/서비스를 제공할것.&lt;/p&gt;

&lt;h3 id=&quot;클라우드-네이티브-앱&quot;&gt;클라우드 네이티브 앱&lt;/h3&gt;
&lt;p&gt;마이크로서비스 아키텍처
기존의 monolithic 시스템은 여러 단점이 있다. -&amp;gt; MSA가 기존 monolithic한 시스템의 문제들을 해결해 줄것이다.
마이크로 서비스 아키텍처에 대해선 &lt;a href=&quot;https://www.slideshare.net/saltynut/building-micro-service-architecture&quot;&gt;이 글&lt;/a&gt; 과 &lt;a href=&quot;https://medium.com/coupang-tech/%ED%96%89%EB%B3%B5%EC%9D%84-%EC%B0%BE%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9A%B0%EB%A6%AC%EC%9D%98-%EC%97%AC%EC%A0%95-94678fe9eb61&quot;&gt;이 글&lt;/a&gt;을 읽으면 도움이 될 것이다.&lt;/p&gt;

&lt;h3 id=&quot;organization--process&quot;&gt;Organization / Process&lt;/h3&gt;
&lt;p&gt;XP를 해라..&lt;/p&gt;

&lt;p&gt;그뒤로는 Pivotal이 위에것들을 도와줄 수 있다.. 하는 영업&lt;/p&gt;

&lt;h2 id=&quot;세션3-넷플릭스-서비스와-피보탈&quot;&gt;세션3. 넷플릭스 서비스와 피보탈&lt;/h2&gt;
&lt;p&gt;클라우드 네이티브한 MSA를 가져가기 위해서 아래 책들은 좋은 레퍼런스가 될것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;클라우네이티브자바 - 조쉬롱
카프카 데이터플랫폼의 최강자
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;넷플릭스가 왜 기존의 거대한 monolithic 시스템을 MSA로 바꾸었는지에 대한 이야기. 다른 자료도 많지만 &lt;a href=&quot;https://media.netflix.com/ko/company-blog/completing-the-netflix-cloud-migration&quot;&gt;이 글&lt;/a&gt;을 보자&lt;/p&gt;

&lt;p&gt;이렇게 MSA로 바꿔나가면서 넷플릭스는 MSA에 꼭 필요하다고 생각되는 컴포넌트들을 오픈소스화 하여 MSA 진영을 이끄는데 기여하고 있다.&lt;/p&gt;

&lt;p&gt;각각의 마이크로서비스가 뜰 때 설정 정보를 주입해주는
configuration server - &lt;a href=&quot;https://github.com/Netflix/archaius&quot;&gt;archalus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;어떤 마이크로서비스가 어디에(어떤 ip/호스트로) 떠있는지 알려주는 전화번호부
service discovery(registry) - &lt;a href=&quot;https://github.com/Netflix/eureka&quot;&gt;eureka&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;장애가 생겼을 때 장애를 고립시켜 다른 마이크로 서비스에 영향을 주지 않게 돕는 누전차단기
circuit breaker - &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;Hysrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zuul is a gateway service that provides dynamic routing, monitoring, resiliency, security, and more.
api gateway - &lt;a href=&quot;https://github.com/Netflix/zuul&quot;&gt;zuul&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ribbon is a Inter Process Communication (remote procedure calls) library with built in software load balancers. The primary usage model involves REST calls with various serialization scheme support.
load balacer - &lt;a href=&quot;https://github.com/Netflix/ribbon&quot;&gt;ribobn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;모니터링 도구
realtime monitoring - &lt;a href=&quot;https://github.com/Netflix/atlas&quot;&gt;atlas&lt;/a&gt; / &lt;a href=&quot;https://github.com/Netflix/spectator&quot;&gt;spectator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;빌드 / 배포도구
zero downtime delivery - (CI/CD)&lt;a href=&quot;https://www.spinnaker.io/&quot;&gt;spinnaker&lt;/a&gt; (canary)kayenta&lt;/p&gt;

&lt;p&gt;fault injection&lt;/p&gt;

&lt;p&gt;랜덤하게 인스턴스나 DB를 죽이고 다니는 카오스 몽키 - 이 인스턴스가 죽으면 어떤 영향이 생기지?
&lt;a href=&quot;https://github.com/Netflix/chaosmonkey&quot;&gt;chaos monkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;클라우드를 위한 분산 메모리 캐시
&lt;a href=&quot;https://github.com/Netflix/EVCache&quot;&gt;evcache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기타 등등 많은데 유투브에 &lt;code class=&quot;highlighter-rouge&quot;&gt;넷플릭스 혼돈의제왕&lt;/code&gt;을 검색해보면 좀 더 자세한 설명을 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;세션4-spring-project와-pivotal-cloud-foundry의-최신-업데이트&quot;&gt;세션4. Spring Project와 Pivotal Cloud Foundry의 최신 업데이트&lt;/h2&gt;
&lt;p&gt;PCF에 대한 간략한 소개. 스프링 부트로 마이크로 서비스를 만들면 PCF에서 제공하는 cli로 이걸 배포하고, 모니터링하고 위에 넷플릭스가 만든 OSS들을
스프링 환경에서 쉽게 사용할 수 있도록 준비해두었다. actuator라던지..&lt;/p&gt;

&lt;h2 id=&quot;세션5-google-cloud-platform을-통한-pivotal-cloud-foundry의-확장&quot;&gt;세션5. Google Cloud Platform을 통한 Pivotal Cloud Foundry의 확장&lt;/h2&gt;
&lt;p&gt;PCF 가 GCP를 워크로드로 쓸꺼다. GCP이 최고다.&lt;/p&gt;

&lt;h2 id=&quot;세션6-클라우드-네이티브-엔터프라이즈-사례-발표-case-studies&quot;&gt;세션6. 클라우드 네이티브 엔터프라이즈 사례 발표 (Case studies)&lt;/h2&gt;
&lt;p&gt;기존의 많은 IT와 거리가 먼 엔터프라이즈들, 거대 금융회사나 포드같은 자동차 제조사들이 IT를 내제화 하는데 관심을 갖고 있고 Pivotal을 이에 컨설팅을 제공한다.
그들이 devOps 개발팀을 가질 수 있도록 페어로 붙어서 함께 일하고 그들이 가진 monolithic한 시스템중 가장 코어한 부분을 마이크로 서비스로 분리해내는 일을 함께 하며
노하우를 축적한 쿡북을 만든다.&lt;/p&gt;

&lt;p&gt;USA airforce pivotal로 검색하면 좀 더 자세한 사례를 볼 수 있다.
중요한건 한 이터러블이 끝날때 피쳐가 동작하고 피드백을 받을 수 있어야 한다는것.&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기.&lt;/h2&gt;

&lt;p&gt;사실 좀 더 기술적인 이야기를 할 줄 알았는데, 이 점에 좀 실망했다. 하지만 적어도 Spring이, 그리고 Spring을 이끄는 Pivotal이 옳다고 생각하는 방향에서 Cloud Native와 MSA는
빼놓을 수 없는 키워드인것 같다. 분명 매력적이다.&lt;/p&gt;</content><author><name>genie-youn</name></author><category term="documentation" /><category term="sample" /><summary type="html">Pivotal이 한국에서 처음 Cloud Native Day라는 이름으로 세미나를 진행하였다. Spring의 리드그룹인 Pivotal이 어떤 방향성을 갖고 있는지 궁금하기도 했고, 혹시 향후에 Spring으로 MSA를 개발할 때 도움이 될까 싶어 참여하게 됐다. 히로쿠의 The Twelve-Factor app 같은걸 기대하고 갔다.</summary></entry></feed>